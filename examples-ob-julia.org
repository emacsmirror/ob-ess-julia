#+TITLE: Examples of code blocks with ob-julia
#+AUTHOR: Frédéric Santos
#+OPTIONS: todo:t
#+STARTUP: noindent num

It is better to read this document within Emacs, or to read the raw Org format on Github, so that the header arguments of code blocks can be accessible.

* IN-PROGRESS External evaluation
If ~:session~ is not specified (or equal to ~none~), then the code block is evaluated through an external process.

** DONE With ~:results output~
   CLOSED: [2020-10-07 mer. 10:14]
Elementary ~:results output~ are supported:

#+begin_src julia :results output :exports both
println("Hello world!")
#+end_src

#+RESULTS:
: Hello world!

#+begin_src julia :results output :exports both :session none
print(2+3)
#+end_src

#+RESULTS:
: 5

#+begin_src julia :results output :exports both
a = [1 2 3 4]
#+end_src

#+RESULTS:
: 1×4 Array{Int64,2}:
:  1  2  3  4

** IN-PROGRESS With ~:results value~
Basic Julia types (arrays, dictionaries and tuples) are supported. DataFrames, which are a non-native data structure, have some kind of basic support, but are still to be improved. Some examples are given below.

*** DONE Arrays
    CLOSED: [2020-10-06 mar. 18:32]
#+begin_src julia :results value :exports both
a = [1 2 3 4]
a
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

*** DONE Dictionaries
    CLOSED: [2020-10-06 mar. 18:33]
#+begin_src julia :results value :exports both
d = Dict("Emacs" => "awesome", "Julia" => "nice")
d
#+end_src

#+RESULTS:
| Julia | nice    |
| Emacs | awesome |

*** DONE Tuples
    CLOSED: [2020-10-06 mar. 18:35]
#+begin_src julia :results value :exports both
t = ("org", "mode", "is", "great")
t
#+end_src

#+RESULTS:
| org   |
| mode  |
| is    |
| great |

*** IN-PROGRESS DataFrames
A basic ~value~ display is possible. By default, ~ob-julia~ considers that the DataFrame has no header; but a header can be added by specifying =:colnames yes= in the block header.

- An example without header:
  #+begin_src julia :results value :exports both
using DataFrames
# An example without column names:
dtf = DataFrame(                 
 [8.04   9.14  7.46   6.58;    
  6.95   8.14  6.77   5.76;   
  7.58   8.74  12.74  7.71;   
  8.81   8.77  7.11   8.84;   
  8.33   9.26  7.81   8.47])
  #+end_src

  #+RESULTS:
  | 8.04 | 9.14 |  7.46 | 6.58 |
  | 6.95 | 8.14 |  6.77 | 5.76 |
  | 7.58 | 8.74 | 12.74 | 7.71 |
  | 8.81 | 8.77 |  7.11 | 8.84 |
  | 8.33 | 9.26 |  7.81 | 8.47 |

- An example with a header:
  #+begin_src julia :results value :exports both :colnames yes
using DataFrames
# An example with column names:
dtf = DataFrame(                 
 [8.04   9.14  7.46   6.58;    
  6.95   8.14  6.77   5.76;   
  7.58   8.74  12.74  7.71;   
  8.81   8.77  7.11   8.84;   
  8.33   9.26  7.81   8.47])
rename!(dtf, [:a, :b, :c, :d])
dtf
  #+end_src

  #+RESULTS:
  |    a |    b |     c |    d |
  |------+------+-------+------|
  | 8.04 | 9.14 |  7.46 | 6.58 |
  | 6.95 | 8.14 |  6.77 | 5.76 |
  | 7.58 | 8.74 | 12.74 | 7.71 |
  | 8.81 | 8.77 |  7.11 | 8.84 |
  | 8.33 | 9.26 |  7.81 | 8.47 |

** IN-PROGRESS Inline graphical outputs with ~:results output graphics file~
Graphical outputs are supported, at least when they are exported with png or pdf extensions. ~ob-julia~ simply adds a =savefig()= Julia instruction after your code block, so that the plot is saved in the file specified with the ~:file~ keyword.

*** Notes
- For a convenient inline display of Julia plots, please indicate the three result keywords ~:results output graphics file~ in the header of your code block. Some examples are shown below.
- In accordance with default Julia arguments, default width for graphical output is 600 px, and default height is 400 px. Custom values may be specified using the usual header keywords =:width= and =:height=.

*** Gallery of examples
#+begin_src julia :results output graphics file :file example_plots/Plots_scatterplot.png :exports both :height 500 :width 500
using Plots
scatter(rand(100), markersize = 6, c = :red)
#+end_src

#+CAPTION: A scatterplot made with the base ~Plots~ library.
#+RESULTS:
[[file:example_plots/Plots_scatterplot.png]]

#+begin_src julia :results output graphics file :file example_plots/StatsPlots_density.png :exports both
using RDatasets
using StatsPlots
school = RDatasets.dataset("mlmRev","Hsb82");
@df school density(:MAch, group = :Sx)
#+end_src

#+CAPTION: A density plot made with the package ~StatsPlots~.
#+RESULTS:
[[file:example_plots/StatsPlots_density.png]]

* IN-PROGRESS Evaluation within a session
Evaluation of several code blocks within a given session is partly supported, in simple cases such as those illustrated below.

** IN-PROGRESS A simple example of ~:session~ evaluation with ~:results output~
Consider the following commands within a given Julia session, with ~:results output~ type of display (this includes graphic outputs):

#+begin_src julia :results output :session *juliasession* :exports both
x = [2, 7, 8, 4]
#+end_src

#+RESULTS:
: 4-element Array{Int64,1}:
:  2
:  7
:  8
:  4

#+begin_src julia :results output :session *juliasession* :exports both
x[1]
#+end_src

#+RESULTS:
: 2

#+begin_src julia :results output :session *juliasession* :exports both
push!(x, 1)
#+end_src

#+RESULTS:
: 5-element Array{Int64,1}:
:  2
:  7
:  8
:  4
:  1

#+begin_src julia :results output graphics file :file example_plots/session_plot_line.png :session *juliasession* :exports both :width 300 :height 300
using Plots
y = [1, 3, 2, 4, 5]
plot(x, y)
#+end_src

#+CAPTION: A broken line created within a Julia session.
#+RESULTS:
[[file:example_plots/session_plot_line.png]]

** IN-PROGRESS Session evaluation with ~:results value~
The ~:results value~ type of display is also supported. Some examples below.

#+begin_src julia :results value :session *juliasession* :exports both
root_colors = Dict("marquise" => "orange", "eyrie" => "blue")
#+end_src

#+RESULTS:
| marquise | orange |
| eyrie    | blue   |

#+begin_src julia :results value table :session *juliasession* :exports both :colnames yes
using DataFrames
# An example without column names:
dtf = DataFrame(                 
 [8.04   9.14  7.46   6.58;    
  6.95   8.14  6.77   5.76;   
  7.58   8.74  12.74  7.71;   
  8.81   8.77  7.11   8.84;   
  8.33   9.26  7.81   8.47])
rename!(dtf, [:a, :b, :c, :d])
dtf # please indicate the value to return at the end of the code block
#+end_src

#+RESULTS:
|    a |    b |     c |    d |
|------+------+-------+------|
| 8.04 | 9.14 |  7.46 | 6.58 |
| 6.95 | 8.14 |  6.77 | 5.76 |
| 7.58 | 8.74 | 12.74 | 7.71 |
| 8.81 | 8.77 |  7.11 | 8.84 |
| 8.33 | 9.26 |  7.81 | 8.47 |

#+begin_src julia :results output graphics file :file example_plots/plot_session_dtf.png :session *juliasession* :exports both
using Plots
scatter(dtf[:x1], dtf[:x2], markersize = 6, c = :purple)
#+end_src

#+CAPTION: A scatterplot from the previous dataframe.
#+RESULTS:
[[file:example_plots/plot_session_dtf.png]]

** TODO Known issues
- Some displays with ~:results output~ are buggy, but this could be related to [[https://github.com/emacs-ess/ESS/issues/1053][an ESS bug]].

  Don't try this :-)

  #+begin_src julia :results output :session *juliasession* :exports both
using DataFrames
dtf = DataFrame(
    [8.04   9.14  7.46   6.58;
     6.95   8.14  6.77   5.76;
     7.58   8.74  12.74  7.71;
     8.81   8.77  7.11   8.84;
     8.33   9.26  7.81   8.47])
  #+end_src
