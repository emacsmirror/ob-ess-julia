#+TITLE: Examples of code blocks with ob-ess-julia
#+AUTHOR: Frédéric Santos
#+OPTIONS: todo:t
#+STARTUP: noindent num

It is better to read this document within Emacs, or to read the raw Org format on Github, so that the header arguments of code blocks can be accessible.

* IN-PROGRESS External evaluation
If ~:session~ is not specified (or equal to ~none~), then the code block is evaluated through an external process. Note that in this case, since there is no ESS session associated to the src block, there is no auto-completion nor other advanced ESS features.

** DONE With ~:results output~
   CLOSED: [2020-10-07 mer. 10:14]
Elementary ~:results output~ are supported:

#+begin_src ess-julia :results output :exports both
println("Hello world!")
#+end_src

#+RESULTS:
: Hello world!

#+begin_src ess-julia :results output :exports both :session none
print(2+4)
#+end_src

#+RESULTS:
: 6

#+begin_src ess-julia :results output :exports both
a = [1 2 3 4]
#+end_src

#+RESULTS:
: 1×4 Matrix{Int64}:
:  1  2  3  4

** IN-PROGRESS With ~:results value~
Basic Julia types (arrays, dictionaries and tuples) are supported. DataFrames, which are a non-native data structure, have some kind of basic support, but are still to be improved. Some examples are given below.

*** DONE Arrays
    CLOSED: [2020-10-06 mar. 18:32]
#+begin_src ess-julia :results value :exports both
a = [3 4 5 6]
a
#+end_src

#+RESULTS:
| 3 | 4 | 5 | 6 |

*** DONE Dictionaries
    CLOSED: [2020-10-06 mar. 18:33]
#+begin_src ess-julia :results value :exports both
d = Dict("Emacs" => "awesome", "Julia" => "nice")
d
#+end_src

#+RESULTS:
| Julia | nice    |
| Emacs | awesome |

*** DONE Tuples
    CLOSED: [2020-10-06 mar. 18:35]
#+begin_src ess-julia :results value :exports both
t = ("org", "mode", "is", "great!")
t
#+end_src

#+RESULTS:
| org    |
| mode   |
| is     |
| great! |

*** DONE DataFrames
    CLOSED: [2021-04-13 mar. 18:18]
A basic ~value~ display is possible. By default, ~ob-julia~ considers that the DataFrame has no header; but a header can be added by specifying =:colnames yes= in the block header.

- An example without header:
  #+begin_src ess-julia :results value :exports both
using DataFrames
# An example without column names:
dtf = DataFrame(                 
 [8.04   9.14  7.46   6.58;    
  6.95   8.14  6.77   5.76;   
  7.58   8.74  12.74  7.71;   
  8.81   8.77  7.11   8.84;   
  8.33   9.26  7.81   8.47])
  #+end_src

  #+RESULTS:
  | 8.04 | 9.14 |  7.46 | 6.58 |
  | 6.95 | 8.14 |  6.77 | 5.76 |
  | 7.58 | 8.74 | 12.74 | 7.71 |
  | 8.81 | 8.77 |  7.11 | 8.84 |
  | 8.33 | 9.26 |  7.81 | 8.47 |

- An example with a header:
  #+begin_src ess-julia :results value :exports both :colnames yes
using DataFrames
# An example with column names:
dtf = DataFrame(                 
 [8.04   9.14  7.46   6.58;    
  6.95   8.14  6.77   5.76;   
  7.58   8.74  12.74  7.71;   
  8.81   8.77  7.11   8.84;   
  8.33   9.26  7.81   8.47], :auto)
dtf
  #+end_src

  #+RESULTS:
  |   x1 |   x2 |    x3 |   x4 |
  |------+------+-------+------|
  | 8.04 | 9.14 |  7.46 | 6.58 |
  | 6.95 | 8.14 |  6.77 | 5.76 |
  | 7.58 | 8.74 | 12.74 | 7.71 |
  | 8.81 | 8.77 |  7.11 | 8.84 |
  | 8.33 | 9.26 |  7.81 | 8.47 |

** IN-PROGRESS Inline graphical outputs with ~:results output graphics file~
Graphical outputs are supported, at least when they are exported with png or pdf extensions. ~ob-julia~ simply adds a =savefig()= Julia instruction after your code block, so that the plot is saved in the file specified with the ~:file~ keyword.

*** Notes
- For a convenient inline display of Julia plots, please indicate the three result keywords ~:results output graphics file~ in the header of your code block. Some examples are shown below.
- In accordance with default Julia arguments, default width for graphical output is 600 px, and default height is 400 px. Custom values may be specified using the usual header keywords =:width= and =:height=.

*** Gallery of examples
#+begin_src ess-julia :results output graphics file :file example_plots/Plots_scatterplot.png :exports both :height 500 :width 500
using Plots
scatter(rand(100), markersize = 6, c = :purple)
#+end_src

#+CAPTION: A scatterplot made with the base ~Plots~ library.
#+RESULTS:
[[file:example_plots/Plots_scatterplot.png]]

#+begin_src ess-julia :results output graphics file :file example_plots/StatsPlots_density.png :exports both
using RDatasets
using StatsPlots
school = RDatasets.dataset("mlmRev","Hsb82");
@df school density(:MAch, group = :Sx)
#+end_src

#+CAPTION: A density plot made with the package ~StatsPlots~.
#+RESULTS:
[[file:example_plots/StatsPlots_density.png]]

* IN-PROGRESS Evaluation within a session
If a ~:session~ argument is given by the user in the header of a code block, this code block will be evaluated within a given Julia session, using ESS. Some simple examples are given below. (Note that a Julia session will be started automatically at your first ~C-c C-c~ on Julia code block; the Julia process should not be started manually with ~M-x julia~.)

** DONE A simple example of ~:session~ evaluation with ~:results output~
   CLOSED: [2020-10-12 lun. 07:51]
Consider the following commands within a given Julia session, with ~:results output~ type of display (this includes graphical outputs):

#+begin_src ess-julia :results output :session *juliasession* :exports both
x = [2, 7, 8, 4]
#+end_src

#+RESULTS:
: 4-element Vector{Int64}:
:  2
:  7
:  8
:  4

#+begin_src ess-julia :results output :session *juliasession* :exports both
x[2]
#+end_src

#+RESULTS:
: 7

#+begin_src ess-julia :results output :session *juliasession* :exports both
push!(x, 3)
#+end_src

#+RESULTS:
: 5-element Vector{Int64}:
:  2
:  7
:  8
:  4
:  3

#+begin_src ess-julia :results output graphics file :file example_plots/session_plot_line.png :session *juliasession* :exports both :width 300 :height 300
using Plots
y = [1, 3, 2, 4, 5]
plot(x, y, color = :purple)
#+end_src

#+RESULTS:
[[file:example_plots/session_plot_line.png]]

There should be no limitation about the data types that can be displayed as verbatim outputs:
#+begin_src ess-julia :results output :session *juliasession* :exports both
using DataFrames
dtf = DataFrame(
    [8.04   9.14  7.46   6.58;
     6.95   8.14  6.77   5.76;
     7.58   8.74  12.74  7.71;
     8.81   8.77  7.11   8.84;
     8.33   9.26  7.81   8.47], :auto)
#+end_src

#+RESULTS:
: 5×4 DataFrame
:  Row │ x1       x2       x3       x4
:      │ Float64  Float64  Float64  Float64
: ─────┼────────────────────────────────────
:    1 │    8.04     9.14     7.46     6.58
:    2 │    6.95     8.14     6.77     5.76
:    3 │    7.58     8.74    12.74     7.71
:    4 │    8.81     8.77     7.11     8.84
:    5 │    8.33     9.26     7.81     8.47

** IN-PROGRESS Session evaluation with ~:results value~
The ~:results value~ type of display is also supported, for some data types (arrays, dictionaries, tuples, dataframes). Some examples below.

#+begin_src ess-julia :results value :session *juliasession* :exports both
root_colors = Dict("marquise" => "orange", "eyrie" => "navy",
                   "vagabond" => "darkgray", "woodland alliance" => "green")
#+end_src

#+RESULTS:
| woodland alliance | green    |
| marquise          | orange   |
| eyrie             | navy     |
| vagabond          | darkgray |

#+begin_src ess-julia :results output graphics file :file example_plots/session_plot_dtf.png :session *juliasession* :exports both
using Plots
scatter(dtf[!, :x1], dtf[!, :x2], markersize = 6, c = :red)
#+end_src

#+CAPTION: A scatterplot from the previous dataframe.
#+RESULTS:
[[file:example_plots/session_plot_dtf.png]]

DataFrames can be exported as org tables as well:

#+begin_src ess-julia :results value table :session *juliasession* :exports both :colnames yes
using DataFrames # reload just for testing purpose, this is not needed
dtf2 = DataFrame(          
    [1 2 3 4;    
     2 3 4 1;   
     3 4 1 2])
rename!(dtf2, [:a, :b, :c, :d])
dtf2 # please indicate the value to return at the end of the code block
#+end_src

#+RESULTS:
| a | b | c | d |
|---+---+---+---|
| 1 | 2 | 3 | 4 |
| 2 | 3 | 4 | 1 |
| 3 | 4 | 1 | 2 |

** IN-PROGRESS Specifying a session directory with ~:dir~
By default, if no directory is specified by the user, ESS will ask for the working directory of the newly created session. However, this directory can be directly given as a ~:dir~ argument. The code block below will run a Julia session in ~/home/fsantos/Documents/~:

#+begin_src ess-julia :results output :session *newsession* :exports both :dir /home/fsantos/Documents/
a = [7 8 9 10]
#+end_src

#+RESULTS:
: 
: 1×4 Array{Int64,2}:
:  7  8  9  10

* IN-PROGRESS Passing variables with ~:var~
** DONE Atomic values
   CLOSED: [2020-10-22 jeu. 10:02]
Consider the following R code block, defining an atomic value ~Rvar~:

#+NAME: Rvar
#+begin_src R :results value :session *R* :exports both
Rvar <- 2
#+end_src

#+RESULTS: Rvar
: 2

This variable ~Rvar~ can be passed into a Julia session using the ~:var~ header argument:
#+begin_src ess-julia :results output :session *juliasession* :exports both :var Rvar=Rvar
Rvar
#+end_src

#+RESULTS:
: 2

** IN-PROGRESS Non-atomic values
It's also possible to pass non-atomic values such as dataframes between various languages. For instance, let's create a dataframe in R:

#+NAME: Rdtf
#+begin_src R :results value :session *R* :exports both :colnames yes
Rdtf <- head(iris)
Rdtf
#+end_src

#+RESULTS: Rdtf
| Sepal.Length | Sepal.Width | Petal.Length | Petal.Width | Species |
|--------------+-------------+--------------+-------------+---------|
|          5.1 |         3.5 |          1.4 |         0.2 | setosa  |
|          4.9 |           3 |          1.4 |         0.2 | setosa  |
|          4.7 |         3.2 |          1.3 |         0.2 | setosa  |
|          4.6 |         3.1 |          1.5 |         0.2 | setosa  |
|            5 |         3.6 |          1.4 |         0.2 | setosa  |
|          5.4 |         3.9 |          1.7 |         0.4 | setosa  |

This dataframe ~Rdtf~ can then be passed into the Julia session with the proper ~:var~ header argument. Here is its display as a ~value table~:

#+begin_src ess-julia :results value table :session *juliasession* :exports both :var Rdtf=Rdtf :colnames yes
Rdtf
#+end_src

#+RESULTS:
| Sepal.Length | Sepal.Width | Petal.Length | Petal.Width | Species |
|--------------+-------------+--------------+-------------+---------|
|          5.1 |         3.5 |          1.4 |         0.2 | setosa  |
|          4.9 |         3.0 |          1.4 |         0.2 | setosa  |
|          4.7 |         3.2 |          1.3 |         0.2 | setosa  |
|          4.6 |         3.1 |          1.5 |         0.2 | setosa  |
|          5.0 |         3.6 |          1.4 |         0.2 | setosa  |
|          5.4 |         3.9 |          1.7 |         0.4 | setosa  |

and its display as an ~output~:

#+begin_src ess-julia :results output :session *juliasession* :exports both :var Rdtf=Rdtf
Rdtf
#+end_src

#+RESULTS:
#+begin_example
6×5 DataFrame
 Row │ Sepal.Length  Sepal.Width  Petal.Length  Petal.Width  Species
     │ Float64       Float64      Float64       Float64      String
─────┼───────────────────────────────────────────────────────────────
   1 │          5.1          3.5           1.4          0.2  setosa
   2 │          4.9          3.0           1.4          0.2  setosa
   3 │          4.7          3.2           1.3          0.2  setosa
   4 │          4.6          3.1           1.5          0.2  setosa
   5 │          5.0          3.6           1.4          0.2  setosa
   6 │          5.4          3.9           1.7          0.4  setosa
#+end_example
