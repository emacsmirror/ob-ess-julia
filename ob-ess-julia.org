#+TITLE: ob-ess-julia
#+SUBTITLE: Un document org pour tangler le code source
#+AUTHOR: Frédéric Santos
#+PROPERTY: header-args :tangle ob-ess-julia.el

* DONE Frontmatter
CLOSED: [2020-09-28 lun. 09:46]
L'en-tête :
#+begin_src emacs-lisp :results output
;;; ob-ess-julia --- Org babel support for Julia language,
;;;                  based on ESS.

;; Copyright (C) 2020
;; Credits:
;; - Primarily based on / forked from G. J. Kerns' ob-julia.
;;   See the original version at https://github.com/gjkerns/ob-julia
;; - Also based on ob-R.el by Eric Schulte and Dan Davison,
;;   for consistency with other ob-* backends.

;; Author: Frédéric Santos
;; Version: 2020-10-14
;; Keywords: babel, ess, julia, literate programming, org
;; URL: https://gitlab.com/f-santos/ob-ess-julia
;; Package-Requires: ((emacs "26.1") (ess "18.10.3snapshot") (cl-lib "0.6.1"))

;; This file is *not* part of GNU Emacs.

;;; Commentary:
;; This package intends to add an elementary support for Julia language
;; in Org mode.  It is still at an early stage of development.

;;; Code:

#+end_src

* DONE Fonctions externes et packages requis
CLOSED: [2020-09-28 lun. 09:46]
#+begin_src emacs-lisp :results output
;; Required packages:
(require 'cl-lib)
(require 'ess)
(require 'ess-julia)
(require 'ob)

;; External functions from ESS:
(declare-function inferior-ess-send-input "ext:ess-inf" ())
(declare-function ess-make-buffer-current "ext:ess-inf" ())
(declare-function ess-eval-buffer "ext:ess-inf" (vis))
(declare-function ess-wait-for-process "ext:ess-inf"
		  (&optional proc sec-prompt wait force-redisplay))
#+end_src

* Définition de variables et constantes globales
** DONE Appel à Julia
CLOSED: [2020-09-28 lun. 09:55]
Il s'agit ici de donner le nom de la commande permettant de lancer
Julia, à la fois pour l'évaluation externe et à travers une session.

#+begin_src emacs-lisp :results output
;; For external eval, we do not rely on ESS:
(defcustom org-babel-ess-julia-external-command "julia"
  "Name of command to use for executing Julia code."
  :group 'org-babel
  :package-version '(ob-julia . "2020-10-14")
  :version "27.1"
  :type 'string)

;; For session eval, Julia will be called as an ESS process:
(declare-function julia "ext:ess-julia" (&optional start-args))
#+end_src

On donne aussi une fonction permettant de lancer Julia en s'assurant
que le buffer associé sera immédiatement actif (ce sera utile plus
loin, dans la fonction ~org-babel-julia-initiate-session~) :
#+begin_src emacs-lisp :results output
(defun run-julia-and-select-buffer (&optional start-args)
  "Run Julia with ESS and make sure that its inferior buffer will be active.
START-ARGS is passed to `run-ess-julia'."
  (interactive "P")
  (set-buffer (run-ess-julia start-args)))
#+end_src

** DONE eoe expressions
   CLOSED: [2020-10-07 mer. 15:28]
Ces expressions servent à repérer, dans un comint buffer, les limites
de ce qui a été exécuté.
Voir l'aide de ~org-babel-comint-with-output~.

#+begin_src emacs-lisp :results output
;; End of eval markers for org babel:
(defconst org-babel-ess-julia-eoe-indicator "\"org_babel_ess_julia_eoe\""
  "See help of `org-babel-comint-with-output'.")
(defconst org-babel-ess-julia-eoe-output "org_babel_ess_julia_eoe"
  "See help of `org-babel-comint-with-output'.")
#+end_src

** DONE Position du script d'initialisation de Julia [2/2]
   CLOSED: [2020-10-07 mer. 13:18]
   - [X] defvar
   - [X] Faire en sorte que ce fichier soit bien lu, plus bas dans le
     script

Variable, modifiable par l'utilisateur, qui indique le chemin absolu
du script de démarrage de Julia, inféré à partir du chemin de
~ob-julia.el~.

#+begin_src emacs-lisp :results output
;; ob-ess-julia needs Julia to load a startup script:
(defvar ob-ess-julia-startup
  (concat (file-name-directory (or load-file-name
                                   (buffer-file-name)))
          "ob-ess-julia-startup.jl")
  "File path for startup Julia script.")
#+end_src

Les arguments de départ de l'utilisateur sont récupérés :
#+begin_src emacs-lisp :results output
;; Retrieve this variable defined by ESS:
(defvar inferior-julia-args)
#+end_src

** DONE Quelques défauts
CLOSED: [2020-09-28 lun. 09:54]

#+begin_src emacs-lisp :results output
;; Defaults for Julia session and headers:
(defvar org-babel-default-header-args:ess-julia '())
(defvar org-babel-ess-julia-default-session "*ess-julia*"
  "Default name given to a fresh new Julia session.")
#+end_src

** IN-PROGRESS Header args gérés pour les blocs de code
On n'en donne pour le moment qu'une toute petite partie ; il faudra
augmenter ça au fur et à mesure du développement.

#+begin_src emacs-lisp :results output
(defconst org-babel-header-args:ess-julia
  '((width   . :any)
    (height  . :any)
    (dir     . :any)
    (results . ((file list scalar table vector verbatim)
		(raw html latex)
		(replace append none prepend silent)
		(output graphics value))))
  "Julia-specific header arguments.")
#+end_src

** DONE Gestion du /tangling/
CLOSED: [2020-09-28 lun. 09:55]
On donne juste l'extension par défaut pour tangler les blocs de code Julia.

#+begin_src emacs-lisp :results output
;; Set default extension to tangle Julia code:
(add-to-list 'org-babel-tangle-lang-exts '("ess-julia" . "jl"))
#+end_src

* Gestion des sessions Julia

#+begin_src emacs-lisp :results output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Handling Julia sessions ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** IN-PROGRESS Créer une nouvelle session si besoin [1/2]
 - [X] S'assurer que le script d'initialisation est bien lu au
   démarrage du process Julia
 - [ ] Il y a un problème à régler avec ~:dir~, qui semble faire
   reconnaître par défaut le bloc de code comme du R.
#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-initiate-session (session params)
  "Create a Julia process if there is no active SESSION yet.
SESSION is a string; check whether the associated buffer is a comint buffer.
If SESSION is `none', do nothing.
PARAMS are user-specified src block parameters."
  (unless (equal session "none")
    (let* ((session (or session          ; if user-specified
                        org-babel-ess-julia-default-session))
           (dir (cdr (assoc :dir params)))
	   (ess-ask-for-ess-directory
	    (and (and (boundp 'ess-ask-for-ess-directory)
                      ess-ask-for-ess-directory)
		 (not dir)))
           (path-to-load-file (format "--load=%s" ob-ess-julia-startup))
           (inferior-julia-args
            (concat inferior-julia-args path-to-load-file)))
      (if (org-babel-comint-buffer-livep session)
	  session                       ; session already exists
	(save-window-excursion
          (when (get-buffer session)
	    ;; Session buffer exists, but with dead process
	    (set-buffer session))
	  (run-julia-and-select-buffer) ; create new Julia comint buffer
          (when dir
            (ess-eval-linewise (format "cd(\"%s\")" dir)))
	  (rename-buffer
	   (if (bufferp session)
	       (buffer-name session)
	     (if (stringp session)
		 session
	       (buffer-name))))
	  (current-buffer))))))
#+end_src

** DONE À propos de la session ESS sous-jacente
CLOSED: [2020-09-28 lun. 10:41]
#+begin_src emacs-lisp :results output
;; Retrieve ESS process info:
(defun org-babel-ess-julia-associate-session (session)
  "Associate Julia code buffer with an ESS[Julia] session.
See function `org-src-associate-babel-session'.
Make SESSION be the inferior ESS process associated with the
current code buffer."
  (setq ess-local-process-name
	(process-name (get-buffer-process session)))
  (ess-make-buffer-current))

(defvar ess-current-process-name)       ; dynamically scoped
(defvar ess-local-process-name)         ; dynamically scoped
(defvar ess-ask-for-ess-directory)      ; dynamically scoped
(defvar ess-eval-visibly-p)
#+end_src

** DONE "Préparer" la session
   CLOSED: [2020-10-07 mer. 14:36]
"Préparer" la session consiste à passer, dans le buffer correspondant
à la session voulue, les variables spécifiées avec ~:var~ par
l'utilisateur dans le header du bloc de code. Cela permet de démarrer
sur la "bonne" session, et avec tout l'environnement requis.

#+begin_src emacs-lisp :results output
;; Session helpers:
(defun org-babel-prep-session:ess-julia (session params)
  "Prepare SESSION according to the header arguments specified in PARAMS."
  (let* ((session (org-babel-ess-julia-initiate-session session params))
	 (var-lines (org-babel-variable-assignments:ess-julia params)))
    (org-babel-comint-in-buffer
        session                     ; name of buffer for Julia session
      (mapc (lambda (var)
              (end-of-line 1) (insert var) (comint-send-input nil t)
              (org-babel-comint-wait-for-output session))
            var-lines))
    session))
#+end_src

** IN-PROGRESS Récupérer les variables spécifiées avec ~:var~
   :LOGBOOK:
- Note taken on [2020-10-07 mer. 14:55] \\
  Le code est sans doute fini mais il faudrait le comprendre pas à pas
   :END:

Il s'agit de parser le header du bloc de code pour :
- y récupérer ce qu'il y a dans ~:var~ ;
- créer une expression Julia pour assigner chaque variable présente
  dans ~:var~ ;
- ...

#+begin_src emacs-lisp :results output
(defun org-babel-variable-assignments:ess-julia (params)
  "Parse block PARAMS to return a list of Julia statements assigning the variables in `:var'."
  (let ((vars (org-babel--get-vars params)))
    ;; Create Julia statements to assign each variable specified with `:var':
    (mapcar
     (lambda (pair)
       (org-babel-ess-julia-assign-elisp
	(car pair) (cdr pair)
	(equal "yes" (cdr (assoc :colnames params)))
	(equal "yes" (cdr (assoc :rownames params)))))
     (mapcar
      (lambda (i)
	(cons (car (nth i vars))
	      (org-babel-reassemble-table
	       (cdr (nth i vars))
	       (cdr (nth i (cdr (assoc :colname-names params))))
	       (cdr (nth i (cdr (assoc :rowname-names params)))))))
      (number-sequence 0 (1- (length vars)))))))
#+end_src

** DONE Permettre de retrouver la session associée à un buffer OrgSrc
CLOSED: [2020-09-28 lun. 10:52]
Cette fonction s'inspire de ~ob-R.el~. Elle permet que l'utilisateur
puisse faire son ~C-c C-'~ dans un bloc de code Julia, et se retrouve
dans un buffer d'édition qui reconnaît correctement la session
sous-jacente. Le nom de la session doit être préfixé et suffixé par
des étoiles pour que cela fonctionne.
Voir aussi ici : https://emacs.stackexchange.com/questions/33807/org-src-mode-send-commands-to-repl-in-named-python-session-not-python

#+begin_src emacs-lisp :results output
(defun org-babel-edit-prep:ess-julia (info)
  "Function to edit Julia code in OrgSrc mode.
(I.e., for use with, and is called by, `org-edit-src-code'.)
INFO is a list as returned by `org-babel-get-src-block-info'."
  (let ((session (cdr (assq :session (nth 2 info)))))
    (when (and session
	       (string-prefix-p "*" session)
	       (string-suffix-p "*" session))
      (org-babel-ess-julia-initiate-session session nil))))
#+end_src

* Exécuter un bloc de code Julia

#+begin_src emacs-lisp :results output
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Executing Julia source blocks ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** DONE Redirection générique : ~org-babel-ess-julia-evaluate~
CLOSED: [2020-09-28 lun. 10:22]
C'est la fonction générale qui redirige l'évaluation du bloc de code
vers l'une des fonctions plus spécifiques, selon que le bloc de code
est destiné à être exécuté dans une session précise, ou dans un
process externe.

#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-evaluate
  (session body result-type result-params column-names-p row-names-p)
  "Evaluate Julia code in BODY.
This can be done either within an existing SESSION, or with an external process.
This function only makes the convenient redirection towards the targeted
helper function, depending on this parameter."
  (if session
      (org-babel-ess-julia-evaluate-session
       session body result-type result-params column-names-p row-names-p)
    (org-babel-ess-julia-evaluate-external-process
     body result-type result-params column-names-p row-names-p)))
#+end_src

** IN-PROGRESS Mettre en forme le contenu d'un bloc de code
:LOGBOOK:
- Note taken on [2020-09-29 mar. 07:31] \\
  Il faut revenir sur =org-babel-variable-assignments:ess-julia params)=
:END:
L'idée générale : en plus du bloc de code Julia lui-même, l'exécution
des instructions peut nécessiter d'autres bouts de code externes, tels
que :
- un [[https://orgmode.org/manual/Environment-of-a-Code-Block.html#Environment-of-a-Code-Block][prologue]] exécuté avant le bloc de code lui-même ;
- si besoin, l'instruction Julia =savefig()= permettant d'exporter un
  graphique ;
- si besoin, l'instruction Julia =plot!(size = (...))= qui permet de
  déterminer la taille en pixels du graphique ;
- un [[https://orgmode.org/manual/Environment-of-a-Code-Block.html#Environment-of-a-Code-Block][épilogue]] exécuté à la fin du bloc de code ;
- l'assignement de certaines nouvelles variables avec ~:var~.

En bref, les instructions à exécuter sont la concaténation du bloc de
code lui-même avec ces trois autres potentiels éléments.

#+begin_src emacs-lisp :results output
(defun org-babel-expand-body:ess-julia (body params &optional graphics-file)
  "Expand BODY according to PARAMS, return the expanded body.
I.e., add :prologue and :epilogue to BODY if required, as well as new Julia
variables declared from :var.  The 'expanded body' is actually the union set
of BODY and of all those instructions."
  (let ((width (or (cdr (assq :width params))
                   600))
        (height (or (cdr (assq :height params))
                    400)))
    (mapconcat 'identity
	       (append
	        (when (cdr (assq :prologue params))
		  (list (cdr (assq :prologue params))))
	        ;; TODO: (org-babel-variable-assignments:ess-julia params)
	        (list body)
                (when graphics-file
                  (list (format "plot!(size = (%s, %s))" width height)
                        (format "savefig(\"%s\")" graphics-file)))
	        (when (cdr (assq :epilogue params))
		  (list (cdr (assq :epilogue params)))))
	       "\n")))
#+end_src

** IN-PROGRESS Écrire un résultat dans un fichier temporaire [2/3]
   - [X] Gestion basique
   - [X] Ajouter de quoi gérer les tables (cf ~ob-R. el~)
   - [ ] Ajouter une gestion des erreurs (cf. commentaire de
     G. J. Kerns dans son ~ob-julia.el~)

Il s'agit d'un template qui permet l'évaluation hors session d'un bloc
de code. Le bloc est passé à Julia, et le résultat est écrit dans un
fichier temporaire, qui se situera par défaut dans ~/tmp/babel-....~.

On effectue cette astuce de try/catch car on ne peut (visiblement...)
pas écrire tous les types d'objets avec les mêmes fonctions. CSV.write
marche pour les DataFrames, writedlm marche pour tout le reste. On
teste donc les deux successivement. Si une réussit et l'autre échoue,
il n'y a pas d'erreur produite.

Voir ici : https://scls.gitbooks.io/ljthw/content/_chapters/11-ex8.html

#+begin_src emacs-lisp :results output
(defconst org-babel-ess-julia-write-object-command
  "ob_ess_julia_write(%s, \"%s\", %s);"
  "A template for Julia to evaluate a block of code and write the result to a file.
Has three %s escapes to be filled in:
1. The code to be run (must be an expression, not a statement)
2. The name of the file to write to
3. Column names, \"true\" or\"false\" (used for DataFrames only)")
#+end_src

** IN-PROGRESS Évaluer un bloc de façon externe (session none) [4/6]
   - [X] Gérer le type ~output~
   - [X] Gérer le type ~value~
   - [X] Gérer les graphiques
   - [X] Gérer le colnames des tables
   - [ ] Gérer le rownames des tables (y en a-t-il besoin ?)
   - [ ] *Important* : à la fin, effacer le fichier temporaire

Ici, il n'y a rien de spécial à faire si on veut simplement une
~output~. En revanche, si on veut une ~value~ :
- on lance Julia (en lisant le fichier d'initialisation pour charger
  les packages) sur le body (expanded plus en amont), et on écrit le
  résultat de l'évaluation dans un fichier temporaire ;
- on récupère ce fichier pour en faire une ~value~ correcte, à l'aide
  d'une fonction helper.

#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-evaluate-external-process
    (body result-type result-params column-names-p row-names-p)
  "Evaluate BODY in an external Julia process.
If RESULT-TYPE equals `output' then return standard output as a
string.  If RESULT-TYPE equals `value' then return the value of the
last statement in BODY, as elisp."
  (if (equal result-type 'output)
      (org-babel-eval org-babel-ess-julia-external-command body)
    ;; else: result-type != "output"
    (when (equal result-type 'value)
      (let ((tmp-file (org-babel-temp-file "ess-julia-")))
        (org-babel-eval
         (concat org-babel-ess-julia-external-command
                 " "
                 (format "--load=%s" ob-ess-julia-startup))
         (format org-babel-ess-julia-write-object-command
                 (format "begin\n%s\nend" body)
                 (org-babel-process-file-name tmp-file 'noquote)
                 column-names-p))
        (org-babel-ess-julia-process-value-result
	 (org-babel-result-cond result-params
	   (with-temp-buffer
	     (insert-file-contents tmp-file)
	     (buffer-string))
	   (org-babel-import-elisp-from-file tmp-file "\t"))
	 column-names-p)))))
#+end_src

** IN-PROGRESS Évaluer à l'intérieur d'une session [5/7]
   - [X] Gérer le type ~output~. Le code (extrait de ~ob-R~ est assez
     compliqué ici. Il s'agit en fait, séquentiellement, de passer le
     contenu du bloc de code (suivi de l'eoe-indicator qui en indique
     la fin) dans l'inferior buffer de la session en cours, puis d'en
     retirer tous les prompts et autres machins qui traînent, puis
     d'en retirer toutes les lignes vides. On retourne finalement ça.
   - [X] Gérer les graphiques. C'est inclus dans le type précédent.
   - [X] Gérer le type ~value~. Ici, il s'agit de copier le bloc de
     code dans un buffer temporaire, puis d'envoyer le contenu de ce
     bloc vers le processus ESS actif, d'en faire écrire les résultats
     dans un fichier, puis de lire ces résultats comme dans le cas
     d'une évaluation externe.
   - [X] Gérer les tables
   - [X] Bug qui fait que certains blocs avec ~value~ doivent être
     évalués deux fois pour retourner un résultat
   - [ ] Pour ~:results value~, ce n'est pas compatible avec polymode,
     alors que polymode marche bien avec ~:results output~... chercher
     pourquoi. De manière générale, la gestion du code pour ~value~
     est assez inélégante... La compatibilité avec polymode ne serait
     *pas* de faire :
#+begin_src emacs-lisp :results output :tangle no
(setq org-src-lang-modes
      (append org-src-lang-modes '(("ess-julia" . ess-julia))))
#+end_src
     car cela produit un bug à l'évaluation.
   - [ ] Debug et amélioration de la clarté du code !

#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-evaluate-session
    (session body result-type result-params column-names-p row-names-p)
  "Evaluate BODY in a given Julia SESSION.
If RESULT-TYPE equals `output' then return standard output as a
string.  If RESULT-TYPE equals `value' then return the value of the
last statement in BODY, as elisp."
  (cl-case result-type
    (value
     (let ((tmp-file (org-babel-temp-file "ess-julia-"))
           (tmp-file2 (org-babel-temp-file "ess-julia-")))
       (org-babel-comint-eval-invisibly-and-wait-for-file
	session tmp-file2
        (org-babel-chomp
         (format "@pipe begin\n%s\nend |> ob_ess_julia_write(_, \"%s\", %s)\nwritedlm(\"%s\", [1 2 3 4])"
                 body
                 (org-babel-process-file-name tmp-file 'noquote)
                 column-names-p
                 (org-babel-process-file-name tmp-file2 'noquote))))
       (org-babel-ess-julia-process-value-result
	(org-babel-result-cond result-params
	  (with-temp-buffer
	    (insert-file-contents tmp-file)
	    (org-babel-chomp (buffer-string) "\n"))
	  (org-babel-import-elisp-from-file tmp-file "\t"))
	column-names-p)))
    (output
     (mapconcat
      'org-babel-chomp
      (butlast
       (delq nil
             (mapcar
              (lambda (line) (when (> (length line) 0) line))
              (org-babel-comint-with-output
                  (session org-babel-ess-julia-eoe-indicator)
                (ob-ess-julia--execute-line-by-line
                 body
                 org-babel-ess-julia-eoe-indicator)))))
      "\n"))))
#+end_src

** DONE La fonction principale : ~org-babel-execute:ess-julia~ [8/8]
   CLOSED: [2020-10-07 mer. 14:18]
C'est la fonction principale, i.e. ce qui se passe lors d'un ~C-c C-c~
sur un bloc Julia. Cette fonction doit essentiellement faire ceci :

- [X] Regarder s'il existe déjà une session Julia dans laquelle exécuter
  ce bloc de code. Le cas échéant, créer une nouvelle session, ou
  alors exécuter le bloc dans la session désirée déjà existante.
- [X] Passer le ~body~ à la moulinette de ~org-babel-expand-body:ess-julia~.
- [X] Récupérer le type et les paramètres des résultats du bloc de code.
- [X] Si c'est une figure : dans quel fichier l'écrire ?
- [X] Si c'est une figure : écrire effectivement les résultats dans
  le fichier adéquat
- [X] Si c'est une table : faut-il afficher lignes et colonnes ?
- [X] Si c'est un graphique : aucune sortie textuelle ne doit être
  affichée
- [X] Rassembler les arguments pour produire les résultats et
  rediriger vers la fonction adéquate, ~org-babel-ess-julia-evaluate~.

#+begin_src emacs-lisp :results output
(defun org-babel-execute:ess-julia (body params)
  "Execute a block of Julia code.
The BODY on the block is first refactored with `org-babel-expand-body:ess-julia',
according to user-specified PARAMS.
This function is called by `org-babel-execute-src-block'."
  (let* ((session-name (cdr (assq :session params)))
         (session (org-babel-ess-julia-initiate-session session-name params))
         (graphics-file (org-babel-ess-julia-graphical-output-file params))
         (column-names-p (unless graphics-file (cdr (assq :colnames params))))
	 (row-names-p (unless graphics-file (cdr (assq :rownames params))))
         (expanded-body (org-babel-expand-body:ess-julia body params graphics-file))
         (result-params (cdr (assq :result-params params)))
	 (result-type (cdr (assq :result-type params)))
         (result (org-babel-ess-julia-evaluate
                  session expanded-body result-type result-params
                  (if column-names-p "true" "false")
                  ;; TODO: handle correctly the following last args for rownames
                  nil)))
    ;; Return "textual" results, unless they have been written
    ;; in a graphical output file:
    (unless graphics-file
      result)))
#+end_src

* Helpers
#+begin_src emacs-lisp :results output
;;;;;;;;;;;;;;;;;;;;;
;; Various helpers ;;
;;;;;;;;;;;;;;;;;;;;;
#+end_src

** DONE Reformater du code Julia pour éviter un bug avec ESS
   CLOSED: [2020-10-09 ven. 10:32]

#+begin_src emacs-lisp :results output
;; Dirty helpers for what seems to be a bug with iESS[Julia] buffers.
;; See https://github.com/emacs-ess/ESS/issues/1053

(defun ob-ess-julia--split-into-julia-commands (body org-babel-ess-julia-eoe-indicator)
  "Split BODY into a list of valid Julia commands.
Complete commands are elements of the list; incomplete commands (i.e., commands
that are written on several lines) are `concat'enated, and then passed as one
single element of the list.
Adds string ORG-BABEL-JULIA-EOE-INDICATOR at the end of all instructions.
This workaround avoids what seems to be a bug with iESS[julia] buffers."
  (let* ((lines (split-string body
                              "\n" t))
         (cleaned-lines (mapcar 'org-babel-chomp lines))
         (last-end-char nil)
         (commands nil))
    (while cleaned-lines
      (if (or (not last-end-char)
              ;; matches an incomplete Julia command:
              (not (s-matches? "[(;,]" last-end-char)))
          (progn
            (setq last-end-char (substring (car cleaned-lines) -1))
            (setq commands (cons (pop cleaned-lines) commands)))
        (setq last-end-char (substring (car cleaned-lines) -1))
        (setcar commands (concat (car commands)
                                 " "
                                 (pop cleaned-lines)))))
    (reverse (cons org-babel-ess-julia-eoe-indicator commands))))

(defun ob-ess-julia--execute-line-by-line (body org-babel-ess-julia-eoe-indicator)
  "Execute cleaned BODY into a Julia session.
I.e., clean all Julia instructions, and send them one by one into the
active iESS[julia] process.
Instructions will end by an ORG-BABEL-JULIA-EOE-INDICATOR on Julia buffer."
  (let ((lines (ob-ess-julia--split-into-julia-commands body org-babel-ess-julia-eoe-indicator))
        (jul-proc (get-process (process-name (get-buffer-process (current-buffer))))))
    (mapc
     (lambda (line)
       (insert line)
       (inferior-ess-send-input)
       (ess-wait-for-process jul-proc nil 0.2)
       (goto-char (point-max)))
     lines)))
#+end_src

** DONE Gérer le header des tables retournées avec ~value~
   CLOSED: [2020-10-06 mar. 18:06]

Cette fonction ne fait sens que dans le cas où on retourne une table :
dans ce cas, elle sépare simplement la ligne de titre. Sinon, elle est
simplement la fonction identité.

Attention : dans la fonction ~org-babel-execute:julia~ (la toute
première à être déclenchée par un ~C-c C-c~), l'argument
~column-names-p~ est transformé en "true" ou "false", pour qu'il soit
compréhensible par Julia. Ce n'est donc plus un booléen lisp, mais une
chaîne de caractères.

#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-process-value-result (result column-names-p)
  "Julia-specific processing for `:results value' output type.
RESULT should have been computed upstream (and is typiclly retrieved
from a temp file).
Insert hline if column names in output have been requested
with COLUMN-NAMES-P.  Otherwise RESULT is unchanged."
  (if (equal column-names-p "true")
      (cons (car result) (cons 'hline (cdr result)))
    result))
#+end_src

** DONE Gestion des graphiques
   CLOSED: [2020-10-07 mer. 15:13]
Si l'utilisateur veut un graphique, il doit l'indiquer avec ~:results
graphics~, ainsi que qqch du genre ~:file filename.png~. La fonction
ci-dessous regarde si l'utilisateur a bien inscrit ça en en-tête de
son bloc de code.
- Si c'est le cas, le nom du fichier est extrait de cette en-tête.
- Sinon, elle retourne simplement ~nil~.
La dernière ligne aurait tout aussi bien pu être :
=(cdr (assq :file params))))=
mais on passe plutôt par la fonction ~org-babel-graphical-output-file~
qui fait essentiellement la même chose, avec une gestion explicite des
erreurs en plus.

Pour rappel, ~params~ est une ~alist~ comportant de nombreux éléments
spécifiés par l'utilisateur.

#+begin_src emacs-lisp :results output
(defun org-babel-ess-julia-graphical-output-file (params)
  "Return the name of the file to which Julia should write graphical output.
This name is extracted from user-specified PARAMS of a code block."
  (and (member "graphics" (cdr (assq :result-params params)))
       (org-babel-graphical-output-file params)))
#+end_src

** DONE "Charger" du code dans une session
   CLOSED: [2020-10-07 mer. 14:41]
Cela consiste à se placer dans le bon buffer de la session, puis à y
copier un certain ~body~ tout à la fin.

#+begin_src emacs-lisp :results output
(defun org-babel-load-session:ess-julia (session body params)
  "Load BODY into a given Julia SESSION."
  (save-window-excursion
    (let ((buffer (org-babel-prep-session:ess-julia session params)))
      (with-current-buffer buffer
        (goto-char (process-mark (get-buffer-process (current-buffer))))
        (insert (org-babel-chomp body)))
      buffer)))
#+end_src

* DONE Fin du code
CLOSED: [2020-09-29 mar. 09:21]
#+begin_src emacs-lisp :results output
(provide 'ob-ess-julia)
;;; ob-ess-julia.el ends here
#+end_src
