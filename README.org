#+TITLE: ob-julia, a lightweight Julia support for Org mode
#+AUTHOR: Frédéric Santos

* Introduction
Following [[https://discourse.julialang.org/t/julia-within-org-mode-what-about-a-new-ob-julia/46308/9][my proposition on Julia discourse forum]], this repo intends to offer a lightweight support for Julia language into Org mode. *This is still an incomplete implementation to date.*

** Implemented features and TODOs [50%]
   - [X] External evaluation with verbatim output (~:results output~)
   - [X] External evaluation with formatted output (~:results value~), for standard Julia data structures and DataFrames
   - [X] Session evaluation (using inferior ESS processes) with ~:session~ header argument
   - [X] Inline graphical outputs
   - [X] Ability to indicate ~:width~ and ~:height~ of graphical outputs in pixels
   - [X] Displaying output as org tables, with or without headers
   - [X] Get rid of annoying bug for ~:results output~ for session evaluation of multiline commands (possibly related to [[https://github.com/emacs-ess/ESS/issues/1053][a bug from ESS]]). A very inelegant workaround has been found.
   - [ ] Handling variables passed with ~:var~ header argument
   - [ ] Handling ~:dir~ header argument for working directory
   - [ ] Better error management
   - [ ] Make ~ob-julia~ compatible with polymode so that ~ess-julia-mode~ can be used in the src blocks with:
         #+begin_src emacs-lisp :results output
(setq org-src-lang-modes
      (append org-src-lang-modes '(("julia" . ess-julia))))
         #+end_src
   - [ ] Improve documentation
   - [ ] Implement some simple unit tests
   - [ ] (Maybe, one day,) host this package on MELPA if it reaches a sufficient quality

** Disclaimer
My current knowledge of both Julia and Elisp is very limited. Trying to make another fork of ~ob-julia~ is primarily a way of improving my knowledge in those two languages with a meaningful project. But I cannot guarantee that it is ready for public use (yet).

Other (more advanced) forks of [[https://github.com/gjkerns/ob-julia][the good old ob-julia]] have been made available by various authors: [[https://git.nixo.xyz/nixo/ob-julia][an example here]]. Those forks offer additional options such as async evaluation, and are probably much more elegant or well-written.

* How to use ~ob-julia~
** Installation
This package is not hosted on MELPA. Thus, simply download the whole Git repo somewhere on your hard drive, and add the following lines to your Emacs initialisation file:

#+begin_src emacs-lisp :results output
(add-to-list 'load-path "/your/path/to/ob-julia/")
(require 'ob-julia)
#+end_src

~ob-julia~ is based on [[https://github.com/emacs-ess/ESS][ESS]]. Thus, the Emacs package ~ess~ is required.

** Demo
Some examples of implemented features can be found in the file ~examples-ob-julia.org~.

** Notes and tips
- ~:session~ names should be prefixed an suffixed by ~*~, e.g. ~*julia*~ or ~*mysession*~ are convenient names.
- The following Julia packages are required: ~CSV~, ~DelimitedFiles~. They are used for the ~:result value~ output type. They are loaded (with ~using~) at the beginning of each Julia session started with ~ob-julia~ (which is inelegant; I'm still searching for a better option).
- I suggest the following settings for the Emacs initialisation file:
  #+begin_src emacs-lisp :results output
;; If Julia is not yet loaded into org supported languages:
(org-babel-do-load-languages 'org-babel-load-languages
                             (append org-babel-load-languages
                                     '((julia . t))))

;; Shortcuts for Julia code block headers:
(add-to-list 'org-structure-template-alist
	     '("j" . "src julia :results output :session *julia* :exports both"))
(add-to-list 'org-structure-template-alist
	     '("jfig" . "src julia :results output graphics file :file FILENAME.png :session *julia* :exports both"))
(add-to-list 'org-structure-template-alist
	     '("jtab" . "src julia :results value table :session *julia* :exports both :colnames yes"))
  #+end_src

* License
This package is under a [[https://en.wikipedia.org/wiki/CeCILL][CeCILL 2.1 license]], which is compatible with GPL license.
